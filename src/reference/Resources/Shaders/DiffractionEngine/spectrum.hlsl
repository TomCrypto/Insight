#include <pass>

Texture2D<float> transform : register(t0);

SamplerState texSampler
{
    BorderColor = float4(0, 0, 0, 1);
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};

cbuffer constants : register(b0)
{
    float z; // observation plane distance
}

static const uint SPECTRAL_SAMPLES = 80;
static const float MAX_WAVELENGTH = 775;

static const float4 colors[SPECTRAL_SAMPLES] =
{
    float4(0.058, 0.000, 1.000, 380.0),
    float4(0.021, 0.000, 1.000, 385.0),
    float4(0.030, 0.000, 1.000, 390.0),
    float4(0.031, 0.000, 1.000, 395.0),
    float4(0.032, 0.000, 1.000, 400.0),
    float4(0.033, 0.000, 1.000, 405.0),
    float4(0.030, 0.000, 1.000, 410.0),
    float4(0.028, 0.000, 1.000, 415.0),
    float4(0.025, 0.000, 1.000, 420.0),
    float4(0.019, 0.000, 1.000, 425.0),
    float4(0.011, 0.000, 1.000, 430.0),
    float4(0.000, 0.000, 1.000, 435.0),
    float4(0.000, 0.015, 1.000, 440.0),
    float4(0.000, 0.033, 1.000, 445.0),
    float4(0.000, 0.058, 1.000, 450.0),
    float4(0.000, 0.088, 1.000, 455.0),
    float4(0.000, 0.125, 1.000, 460.0),
    float4(0.000, 0.170, 1.000, 465.0),
    float4(0.000, 0.236, 1.000, 470.0),
    float4(0.000, 0.326, 1.000, 475.0),
    float4(0.000, 0.449, 1.000, 480.0),
    float4(0.000, 0.610, 1.000, 485.0),
    float4(0.000, 0.813, 1.000, 490.0),
    float4(0.000, 1.000, 0.947, 495.0),
    float4(0.000, 1.000, 0.755, 500.0),
    float4(0.000, 1.000, 0.621, 505.0),
    float4(0.000, 1.000, 0.520, 510.0),
    float4(0.000, 1.000, 0.440, 515.0),
    float4(0.000, 1.000, 0.375, 520.0),
    float4(0.000, 1.000, 0.319, 525.0),
    float4(0.000, 1.000, 0.258, 530.0),
    float4(0.000, 1.000, 0.191, 535.0),
    float4(0.000, 1.000, 0.109, 540.0),
    float4(0.000, 1.000, 0.000, 545.0),
    float4(0.136, 1.000, 0.000, 550.0),
    float4(0.293, 1.000, 0.000, 555.0),
    float4(0.480, 1.000, 0.000, 560.0),
    float4(0.706, 1.000, 0.000, 565.0),
    float4(0.984, 1.000, 0.000, 570.0),
    float4(1.000, 0.751, 0.000, 575.0),
    float4(1.000, 0.563, 0.000, 580.0),
    float4(1.000, 0.426, 0.000, 585.0),
    float4(1.000, 0.324, 0.000, 590.0),
    float4(1.000, 0.245, 0.000, 595.0),
    float4(1.000, 0.187, 0.000, 600.0),
    float4(1.000, 0.143, 0.000, 605.0),
    float4(1.000, 0.109, 0.000, 610.0),
    float4(1.000, 0.084, 0.000, 615.0),
    float4(1.000, 0.065, 0.000, 620.0),
    float4(1.000, 0.050, 0.000, 625.0),
    float4(1.000, 0.039, 0.000, 630.0),
    float4(1.000, 0.030, 0.000, 635.0),
    float4(1.000, 0.023, 0.000, 640.0),
    float4(1.000, 0.017, 0.000, 645.0),
    float4(1.000, 0.013, 0.000, 650.0),
    float4(1.000, 0.010, 0.000, 655.0),
    float4(1.000, 0.007, 0.000, 660.0),
    float4(1.000, 0.006, 0.000, 665.0),
    float4(1.000, 0.005, 0.000, 670.0),
    float4(1.000, 0.004, 0.000, 675.0),
    float4(1.000, 0.003, 0.000, 680.0),
    float4(1.000, 0.002, 0.000, 685.0),
    float4(1.000, 0.001, 0.000, 690.0),
    float4(1.000, 0.001, 0.000, 695.0),
    float4(1.000, 0.000, 0.000, 700.0),
    float4(1.000, 0.000, 0.001, 705.0),
    float4(1.000, 0.002, 0.000, 710.0),
    float4(1.000, 0.005, 0.000, 715.0),
    float4(1.000, 0.000, 0.011, 720.0),
    float4(1.000, 0.000, 0.007, 725.0),
    float4(1.000, 0.000, 0.002, 730.0),
    float4(1.000, 0.030, 0.000, 735.0),
    float4(1.000, 0.000, 0.049, 740.0),
    float4(1.000, 0.030, 0.000, 745.0),
    float4(1.000, 0.000, 0.018, 750.0),
    float4(1.000, 0.108, 0.000, 755.0),
    float4(1.000, 0.108, 0.000, 760.0),
    float4(1.000, 0.000, 0.185, 765.0),
    float4(1.000, 0.000, 0.185, 770.0),
    float4(1.000, 0.000, 0.185, 775.0),
};

float3 main(PixelDefinition pixel) : SV_Target
{
    float3 color = float3(0, 0, 0);

    for (uint t = 0; t < SPECTRAL_SAMPLES; ++t)
    {
        float scalingFactor = MAX_WAVELENGTH / (z * colors[t].w);
        float2 coords = (pixel.tex - 0.5f) * scalingFactor + 0.5f;
        color += colors[t].xyz * transform.Sample(texSampler, coords); // add scaling factor here??
    }

    return color / SPECTRAL_SAMPLES;
}